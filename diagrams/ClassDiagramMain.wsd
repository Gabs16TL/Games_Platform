@startuml

class GamesPlatform {
    -ListOfPlayers listOfPlayers
    -Game[] games
    +showPlayers()
    +createPlayer()
    +playGame(Game game)
    +showMenu()
    +run()
}

package game {
    abstract class Game {
        # GamePlayer[] gamePlayers
        # GamePlayersProvider gamePlayersProvider
        # List<GamePlayer> results
        + Introduction()
        + Resume()
        + {abstract}Execute()
        # AssignRoles (GamePlayer[] gamePlayers)
        # flipRoles (GamePlayer[] gamePlayers)
    }
    package tictactoe {
        class TicTacToe {

        }
        interface TicTacToePlayer {

        }
    }
    package hangman {
        class HangMan {

        }
        interface HangManPlayer{

        }
    }

    interface GamePlayer {
        + processResult(int)
    }
    interface GamePlayersProvider {
        + getGamePlayers(int) : GamePlayer[]
    }

    package utils {
        class Dice{
            + int generateValue(int bound)
        }
    }

}

package player {
    abstract class Player {
        +id int
        +name String
        +Player (String name)
        +getId()
        +setId()
        +getName()
        +setName()
    }
    class ListOfPlayers {
        +List<Player> playersList
        +createPlayer(Player player)
        +getPlayer(int id)
        +getList()
        +printList()
        +getGamePlayers(int size)
    }
    class Bot {

    }
    class Human {

    }
}


GamesPlatform *-- "2" Game
GamesPlatform *-- ListOfPlayers

Game <|-- TicTacToe
Game <|-- HangMan
Game -right-> GamePlayersProvider

Player <|-- Bot
Player <|-- Human
Player ..|> GamePlayer

Game *-- GamePlayer


Dice <.. Game
Dice <.. GamePlayer

ListOfPlayers *-- Player
ListOfPlayers ..|> GamePlayersProvider

TicTacToe *-- TicTacToePlayer
HangMan *-- HangManPlayer

GamePlayer ..|> TicTacToePlayer
GamePlayer ..|> HangManPlayer

@enduml