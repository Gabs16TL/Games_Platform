@startuml

package hangman {
    class HangMan {
        +NumberOfPlayers
        +TurnHangMan turnhangman
        {abstract}Introduction()
        +Resume()
        {abstract}Execute()
        {abstract}AssignRoles()
        +SelectPlayers()
    }
    class SecretWord {
        +Char GivenWords []
        +Char GuesserWords []
        +boolean AddLetter(Char letter)
        +boolean isGuesser ()
        +printGuessedWord()
    }
    class TurnHangMan {
        +HangManPlayer Giver
        +HangManPlayer Guesser
        +SecretWord secretword
        +HangedMan hangedman
    }
    class HangedMan {   
        +ATTEMPTS    
        +FailedAttempts
        +PaintHangedMan()
        +isDead()
    }
    interface HangManPlayer {
        +ChooseWord()
        +GiveLetter()
    }
}

package player {
    abstract class Player {
        +IdPlayer int
        +PlayerName String
        +ThrowDice()
    }
    class ListOfPlayers {
        +Player [] players
        +CreatePlayer()
        +GetPlayer()
    }
    class Bot {
        +ChooseWord()
        +GiveLetter()
    }
    class Human {
        +ChooseWord()
        +GiveLetter()
    }
}

interface GamePlayersProvider {
        + getGamePlayers(int) : GamePlayer[]
}

interface GamePlayer {
        + processResult(Result)
}

package utils {
    class Dice {
        +RollTheDice()
    }
}

HangMan *--TurnHangMan
HangMan --> GamePlayersProvider
HangMan .right.> Dice
HangMan *-- GamePlayer

Player <|-- Bot
Player <|-- Human
Player .left.|> GamePlayer

TurnHangMan *-- HangedMan
TurnHangMan *-- HangManPlayer

HangedMan *-- SecretWord

HangManPlayer -left-> HangedMan
HangManPlayer <|-- GamePlayer

ListOfPlayers *-- Player
ListOfPlayers .up.|> GamePlayersProvider

@enduml