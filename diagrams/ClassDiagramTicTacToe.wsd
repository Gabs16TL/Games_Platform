@startuml Tictactoe

package player {
    abstract class Player {
        +id int
        +name String
        +Player (String name)
        +getId()
        +setId()
        +getName()
        +setName()
    }
    class ListOfPlayers {
        +List<Player> playersList
        +createPlayer(Player player)
        +getPlayer(int id)
        +getList()
        +printList()
        +getGamePlayers(int size)
    }
    Class Human {
        +putMark()
    }
    Class Bot {
        +putMark()
    }
}

interface GamePlayer {
    + processResult(int)
}
interface GamePlayersProvider {
    + getGamePlayers(int) : GamePlayer[]
}

package util {
    class Dice{
        +generateValue (int bound)
    }
}

package ttt {
    class TicTacToe {
        # GamePlayer[] gamePlayers
        # GamePlayersProvider gamePlayersProvider
        # List<GamePlayer> results
        + Introduction()
        + Resume()
        + Execute()
        # AssignRoles (GamePlayer[] gamePlayers)
        # flipRoles (GamePlayer[] gamePlayers)
    }
    interface TicTacToePlayer {
        +putMark()
    }
    class TurnTicTacToe {
        +TicTacToePlayer playerX
        +TicTacToePlayer playerO
        -TicTacToePlayer result
        +Board board
        +play()
        -setResult()
        +getResult()
    }
    class Board {
        +Piece[][] squares
        +EmptySquare = 9
        +createBoard()
        +paintBoard()
        +isFull()
        +putPiece (Position position, Piece piece)
        +getWinner()
        -checkRows()
        -checkColumns()
        -checkDiagonals()
    }
    Enum Piece {
        X,
        O,
        NULL
    }
}

TicTacToe *-- TurnTicTacToe
TurnTicTacToe *-- TicTacToePlayer
Board *-- Piece

ListOfPlayers *-- Player
TurnTicTacToe *-- Board

Player ..|> GamePlayer
Player <|-- Human
Player <|-- Bot

TicTacToe ..> Dice

TicTacToe -up-> GamePlayersProvider

Dice <.. GamePlayer
ListOfPlayers ..|> GamePlayersProvider

TicTacToe *-- GamePlayer

TicTacToePlayer-->Board

GamePlayer --|>  TicTacToePlayer

@enduml